"""
The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.
"""
directive @defer(
  if: Boolean = true
  label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @goField(
  forceResolver: Boolean
  name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

type BinaryDecisionTask implements Task {
  id: ID!
  taskType: TaskType!
  title: String!
  description: String!
  startTime: Timestamp!
  endTime: Timestamp!
  rewards: Int!
  status: TaskStatus!
  right: Int!
  wrong: Int!
  result: Boolean!
}

type CancelTaskResponse {
  status: CancelTaskResponse_Status!
}

enum CancelTaskResponse_Status {
  SUCCESS
  INVALID_PARAMETER
  TASK_NOT_FOUND
  PERMISSION_DENIED
}

"""
The `ChainId` custom scalar type represents Chain ID. Default to be ETH mainnet.
"""
scalar ChainId

type CheckAccessResponse {
  isVerified: Boolean!
  isStake: Boolean!
}

type CreateTaskResponse {
  status: CreateTaskResponse_Status!
}

enum CreateTaskResponse_Status {
  SUCCESS
  INVALID_PARAMETER
  INSUFFICIENT_BALANCE
  PERMISSION_DENIED
}

"""
The `Cursor` type follows relay.dev spec.
"""
scalar Cursor

type CyberClubPass {
  minted: Boolean!
  role: UserRole!
  reputations: Int!
}

input DoTaskInput {
  taskId: ID!
  result: Boolean!
  challenge: Boolean!
}

type DoTaskResponse {
  status: DoTaskResponse_Status!
}

enum DoTaskResponse_Status {
  SUCCESS
  TASK_NOT_FOUND
  TASK_EXPIRED
  ALREADY_DONE
  PERMISSION_DENIED
}

"""
The `EVMAddress` custom scalar type represents EVM-based address format.
"""
scalar EVMAddress

type JoinResponse {
  status: JoinResponse_Status!
}

enum JoinResponse_Status {
  SUCCESS
  NOT_ELIGIBLE
}

input LoginInput {
  address: EVMAddress!
  signature: String!
  signedMessage: String!
  chainId: Int!
}

type LoginResponse {
  status: LoginResponse_Status!
  message: String!
  data: User
}

enum LoginResponse_Status {
  SUCCESS
  INVALID_ADDRESS
  INVALID_CHAIN
  SIGNATURE_VERIFY_FAILED
  USER_NOT_FOUND
  ASSIGN_MNEMONIC_USERNAME_FAILED
}

type Mutation {
  createTask(input: TaskInput!): CreateTaskResponse!
  cancelTask(id: ID!): CancelTaskResponse!
  doTask(input: DoTaskInput!): DoTaskResponse!
  login(input: LoginInput!): LoginResponse!
  checkAccess: CheckAccessResponse!
  stake(amount: Int!): StakeResponse!
}

"""
The `OrderDirection` enum type provides sorting directions.
"""
enum OrderDirection {
  """
  `ASC` sort in ascending order.
  """
  ASC

  """
  `DESC` sort in descending order.
  """
  DESC
}

"""
The `PageInfo` type provides pagination info for lists.
"""
type PageInfo {
  """
  `hasNextPage` whether there are results in the connection after the current page.
  """
  hasNextPage: Boolean!

  """
  `hasPreviousPage` whether there are results in the connection before the current page..
  """
  hasPreviousPage: Boolean!

  """
  `startCursor` the cursor of the first item in the current page.
  """
  startCursor: Cursor

  """
  `endCursor` the cursor of the last item in the current page.
  """
  endCursor: Cursor
}

type Query {
  task(id: ID!): TaskResponse!
  tasks(type: TaskType, first: Int, after: String): TaskPage!
  me: User
}

type StakeResponse {
  status: StakeResponse_Status!
}

enum StakeResponse_Status {
  SUCCESS
  INSUFFICIENT_BALANCE
}

interface Task {
  id: ID!
  taskType: TaskType!
  title: String!
  description: String!
  startTime: Timestamp!
  endTime: Timestamp!
  rewards: Int!
  status: TaskStatus!
}

input TaskInput {
  taskType: TaskType!
  title: String!
  description: String!
  startTime: Timestamp!
  endTime: Timestamp!
  rewards: Int!
}

type TaskPage {
  pageInfo: PageInfo!
  list: [Task!]!
}

type TaskResponse {
  status: TaskResponse_Status!
  data: Task
}

enum TaskResponse_Status {
  SUCCESS
  TASK_NOT_FOUND
}

enum TaskStatus {
  NOT_START
  IN_PROGRESS
  PUBLIC_REVIEW
  COMMITTEE_REVIEW
  END
  CANCELLED
}

enum TaskType {
  BinaryDecision
  Subjective
  Questionnaire
}

"""
The `Timestamp` custom scalar type represents 10-digit timestamp, e.g. 1661325789
"""
scalar Timestamp

"""
The `TokenId` custom scalar type represents Token ID generated by contract.
"""
scalar TokenId

type UpdateTaskResponse {
  status: UpdateTaskResponse_Status!
}

enum UpdateTaskResponse_Status {
  SUCCESS
  INVALID_PARAMETER
  TASK_NOT_FOUND
  PERMISSION_DENIED
}

"""
The `Url` custom scalar type represents URL links.
"""
scalar Url

type User {
  accessToken: String!
  address: EVMAddress!
  points: Int!
  myTasks(first: Int, after: String): UserTaskPage!
  cyberClubPass: CyberClubPass!
}

enum UserRole {
  PUBLIC
  COMMITTEE
}

type UserTask {
  task: Task!
  win: Boolean!
  points: Int!
  reputations: Int!
  choice: Boolean!
}

type UserTaskPage {
  pageInfo: PageInfo!
  list: [UserTask!]!
}
